Exercise - 1 (Basics)
a) Write a JAVA program to display default value of all primitive data type of JAVA

public class InitialValues {
boolean t;
char c;
byte b;
short s;
int i;
long l;
float f;
double d;
void printInitialValues() {
System.out.println("Data type Initial value");
System.out.println("boolean " + t);
System.out.println("char [" + c + "]");
System.out.println("byte " + b);
System.out.println("short " + s);
System.out.println("int " + i);
System.out.println("long " + l);
System.out.println("float " + f);
System.out.println("double " + d);
}
public static void main(String[] args) {
InitialValues iv = new InitialValues();
iv.printInitialValues();
}
}
b) Write a java program that display the roots of a quadratic equation ax2+bx=0. Calculate the discriminate D and basing on value of D, describe the nature of root.

class RootsDemo
{
double a,b,c;
// constructor
RootsDemo(double x, double y, double z)
{
a = x;
b = y;
c = z;
}
void displayRoots()
{
double d = b*b - 4*a*c;
if(d == 0)
{
System.out.println("Roots are real and equal");
double r1,r2;
r1 = r2 = -b/(2*a);
System.out.println("Root1 = " + r1);
System.out.println("Root2 = " + r2);
}else if(d > 0) {
System.out.println("Roots are real and different");
double r1,r2;
r1 = (-b + Math.sqrt(d))/(2*a);
r2 = (-b - Math.sqrt(d))/(2*a);
System.out.println("Root1 = " + r1);
System.out.println("Root2 = " + r2);
}else {
System.out.println("Roots are imaginary");
double rp, ip;
rp = -b/(2*a);
ip = (Math.sqrt(-d))/(2*a);
System.out.println("Root1 : " + rp + " + " + ip + " I ");
System.out.println("Root2 : " + rp + " - " + ip + " I ");
}
}
public static void main(String args[])
{
RootsDemo r1 = new RootsDemo(2,7,3);
r1.displayRoots();
RootsDemo r2 = new RootsDemo(1,2,1);
r2.displayRoots();
RootsDemo r3 = new RootsDemo(6,3,5);
r3.displayRoots();
}
}
c) Five Bikers Compete in a race such that they drive at a constant speed which may or may not be the same as the other. To qualify the race, the speed of a racer must be more than the average speed of all 5 racers. Take as input the speed of each racer and print back the speed of qualifying racers.

import java.util.Scanner;
class Racer
{
String name=null;
double speed = 0;
Racer(String n, double s)
{
name = n;
speed = s;
}
}
class QualifyedRacers
{
public static void main(String[] args)
{
Scanner sc = new Scanner(System.in);
Racer rc[] = new Racer[5];
System.out.println("Enter the details of 5 Racers : ");
for(int i=0; i < 5; i++)
{
System.out.print("Enter Name of " + (i+1) + " Racer : ");
String nm = sc.next();
System.out.print("Enter Speed of " + (i+1) + " Racer : ");
double sp = sc.nextDouble();
rc[i] = new Racer(nm,sp);
}
System.out.println("The details of Racers : ");
System.out.println("sno\tRacer Name \t Speed ");
for(int i=0; i < 5; i++)
{
System.out.println(i + "\t" + rc[i].name + "\t\t" + rc[i].speed);
}
double sum=0.0;
for(int i=0; i < 5; i++)
{
sum = sum + rc[i].speed;
}
double avg = sum/5.0;
System.out.println("Details of qualified Racers : ");
System.out.println("sno\tRacer Name \t Speed ");
for(int i=0; i < 5; i++)
{
if(rc[i].speed > avg)
System.out.println(i + "\t" + rc[i].name + "\t\t" + rc[i].speed);
}
}
}
Exercise - 2 (Operations, Expressions, Control-flow, Strings)
a) Write a JAVA program to search for an element in a given list of elements using binary search
mechanism.

import java.util.Scanner;
public class BinarySearch
{
public static void main(String arg[])
{
Scanner sc = new Scanner(System.in);
int a[] = {2,5,8,14,23,47,88,95};
System.out.println("Enter the element to search");
int key = sc.nextInt();
int index = bsearch(a, key);
if (index != -1) {
System.out.println("Element found at the index : " + index);
} else {
System.out.println("Element not found");
}
}
public static int bsearch(int ar[], int find)
{
int start = 0;
int end = ar.length -1;
int mid;
while (start <= end) {
mid = (start + end) / 2;
if (ar[mid] == find) {
return mid;
} else if (ar[mid] < find) {
start = mid + 1;
} else if (ar[mid] > find) {
end = mid - 1;
}
} // end of while
return -1;
} // end of method
}
b) Write a JAVA program to sort for an element in a given list of elements using bubble sort

import java.util.Scanner;
class BubbleSort
{
public static void main(String args[])
{
Scanner sc = new Scanner(System.in);
System.out.println("How many elements to sort : ");
int size = sc.nextInt();
int arr[] = new int[size];
System.out.println("Enter the elements into the array : ");
for(int i = 0; i < arr.length; i++)
{
System.out.print("Enter arr[" + i + "] : ");
arr[i] = sc.nextInt();
}
System.out.println("given list in the array are : ");
for(int i=0;i<arr.length;i++)
{
System.out.print(" "+arr[i]);
}
// bubble sorting
for(int i=0;i<arr.length;i++)
{
for(int j=i+1;j<arr.length;j++)
{
if(arr[i] > arr[j])
{
int temp = arr[i];
arr[i] = arr[j];
arr[j] = temp;
}
}
}
System.out.println("\nThe sorted list is ");
for(int i=0;i<arr.length;i++)
{
System.out.print(" "+arr[i]);
}
}
}
c) Write a JAVA program to sort for an element in a given list of elements using merge sort.

import java.util.Scanner;
public class MergeSort
{
/* Merge Sort function */
public static void sort(int[] a, int low, int high)
{
int n = high - low;
if (n <= 1)
return;
int mid = low + n/2;
// recursively sort
sort(a, low, mid);
sort(a, mid, high);
// merge two sorted subarrays
int[] temp = new int[n];
int i = low, j = mid;
for (int k = 0; k < n; k++)
{
if (i == mid)
temp[k] = a[j++];
else if (j == high)
temp[k] = a[i++];
else if (a[j]<a[i])
temp[k] = a[j++];
else
temp[k] = a[i++];
}
for (int k = 0; k < n; k++)
a[low + k] = temp[k];
}
public static void main(String[] args)
{
Scanner scan = new Scanner( System.in );
System.out.println("Merge Sort Test\n");
int size, i;
/* Accept number of elements */
System.out.println("Enter number of integer elements");
size = scan.nextInt();
/* Create array of n elements */
int arr[] = new int[ size ];
/* Accept elements */
System.out.println("\nEnter "+ size +" integer elements");
for (i = 0; i < arr.length; i++)
arr[i] = scan.nextInt();
/* Call method sort */
sort(arr, 0, size);
/* Print sorted Array */
System.out.println("\nElements after sorting ");
for (i = 0; i < size; i++)
System.out.print(arr[i]+" ");
System.out.println();
}
}
d) Write a JAVA program using StringBuffer to delete, remove character.

public class StringBufferDeleteDemo {
public static void main(String[] args) {
StringBuffer sb1 = new StringBuffer("Hello World");
System.out.println("The string is : " + sb1);
sb1.delete(0,6);
System.out.println("After deleting characters from 0 to 6 ");
System.out.println("The resulted string is : " + sb1);
StringBuffer sb2 = new StringBuffer("Hello good morning");
System.out.println("\nThe string is : " + sb2);
sb2.delete(11, 15);
System.out.println("After deleting substring \"morn\" : ");
System.out.println("The resulted string is : " + sb2);
StringBuffer sb3 = new StringBuffer("Have a nice day");
System.out.println("\nThe string is : " + sb3);
sb3.deleteCharAt(8);
System.out.println("After deleting character at index 8 ");
System.out.println("The resulted string is : " + sb3);
}
}
Exercise - 3 (Class, Objects)
a) Write a JAVA program to implement class mechanism. Create a class, methods and invoke them inside main method.
class Rectangle
{
double length;
double breadth;
}
class RectangleTest
{
public static void main(String[] args)
{
Rectangle r = new Rectangle();
System.out.println("length : " + r.length);
System.out.println("breadth : " + r.breadth);
r.length = 10.0;
r.breadth = 20.0;
double area = r.length * r.breadth;
System.out.println("length : " + r.length);
System.out.println("breadth : " + r.breadth);
System.out.println("Area : " + area);
}
}
Program 2: // a simple class with methods
RectangleTest2.java
class Rectangle
{
double length;
double breadth;
public void area()
{
System.out.println("area"+(length*breadth));
}
}
class RectangleTest2
{
public static void main(String args[])
{
System.out.println("Working with First rectangle : ");
Rectangle r=new Rectangle();
r.length=10.0;
r.breadth=20.0;
System.out.println("length:"+r.length);
System.out.println("breadth:"+r.breadth);
r.area();
System.out.println("\nWorking with Second rectangle : ");
Rectangle p=new Rectangle();
p.length=15.0;
p.breadth=25.0;
System.out.println("length:"+p.length);
System.out.println("breadth:"+p.breadth);
p.area();
}
}
b) Write a JAVA program to implement constructor.

class Rectangle
{
double length;
double breadth;
public Rectangle(double l, double b)
{
length = l; breadth = b;
}
public void area()
{
System.out.println("area : "+(length*breadth));
}
}
class RectangleTest3
{
public static void main(String[] args)
{
System.out.println("creating first rectangle..");
Rectangle r1 = new Rectangle(19,14);
System.out.println("r1.length : " + r1.length);
System.out.println("r1.breadth : " + r1.breadth);
r1.area();
System.out.println("\ncreating second rectangle..");
Rectangle r2 = new Rectangle(35.0, 23.5);
System.out.println("r2.length : " + r2.length);
System.out.println("r2.breadth : " + r2.breadth);
r2.area();
}
}

Exercise - 4 (Methods)
a) Write a JAVA program to implement constructor overloading.

class Box {
double length;
double breadth;
double height;
Box(double l, double b, double h)
{
System.out.println("creating cuboid..");
length = l;
breadth = b;
height= h;
}
Box(double s)
{
System.out.println("creating cube..");
length =breadth = height= s;
}
Box()
{
System.out.println("creating unit cube..");
length =breadth = height= 1.0;
}
public double volume() {
return length * breadth * height;
}
}
class ConstOverloadDemo
{
public static void main(String[] args)
{
Box mybox = new Box(10.0,20.0,15.0);
Box unitcube = new Box();
Box mycube = new Box(10.0);
double vol;
vol = mybox.volume();
System.out.println("\nVolume of mybox : " + vol);
vol = unitcube.volume();
System.out.println("Volume of unitcube : " + vol);
vol = mycube.volume();
System.out.println("Volume of mycube : " + vol);
}
}
b) Write a JAVA program implement method overloading.

class ComplexNumber
{
double rpart;
double ipart;
ComplexNumber(double r, double i)
{
rpart = r; ipart = i;
}
}
class MethodOverLoad
{
public void add(int a, int b)
{
System.out.println("int + int : " + (a + b));
}
public void add(double a, double b, double c)
{
System.out.println("double + double + double : " + (a + b + c));
}
public void add(ComplexNumber c1, ComplexNumber c2)
{
System.out.printf("Complex + Complex : %.4f %+.4f i\n",(c1.rpart + c2.rpart), (c1.ipart + c2.rpart));
}
}
class MethodOverLoadTest
{
public static void main(String args[])
{
MethodOverLoad ob = new MethodOverLoad();
ob.add(10,15);
ob.add(10.0, 15.0, 20.0);
ComplexNumber cno1 = new ComplexNumber(12,15);
ComplexNumber cno2 = new ComplexNumber(7,4);
ob.add(cno1,cno2);
}
}

Exercise - 5 (Inheritance)
a) Write a JAVA program to implement Single Inheritance
class A {
int i, j;
void showij() {
System.out.println("i and j : " + i + " " + j);
}
}
class B extends A {
int k;
void showk() {
System.out.println("k: " + k);
}
void sum() {
System.out.println("i + j + k : " + (i + j + k));
}
}
class InheritTest {
public static void main(String[] args) {
A superOb = new A();
B subOb = new B();
superOb.i = 10;
superOb.j = 20;
System.out.println("Contents of superOb: " );
superOb.showij();
System.out.println();
subOb.i = 7;
subOb.j = 8;
subOb.k = 9;
System.out.println("Contents Of subOb : ");
subOb.showij();
subOb.showk();
System.out.println("Sum of i, j, k in subOb : ");
subOb.sum();
}
}
b) Write a JAVA program to implement multi level Inheritance

class Rectangle {
int length;
int width;
Rectangle() { }
public Rectangle(int l, int w) {
length = l;
width = w;
}
}
class Box extends Rectangle {
int height;
Box() { }
public Box (int l, int w, int h) {
length = l;
width = w;
height = h;
}
public int volume() {
return (length * width * height);
}
}
class SolidBox extends Box {
int density;
public SolidBox(int l, int w, int h, int d) {
length = l;
width = w;
height = h;
density = d;
}
public int weight() {
return(super.volume() * density);
}
}
class MultiLevelInheritTest
{
public static void main(String[] args)
{
Rectangle r1 = new Rectangle(5,8);
System.out.println("Area of rectangle : " + (r1.length * r1.width));
Box b1 = new Box(7,5,9);
System.out.println("Volume of the box : " + b1.volume());
SolidBox m1 = new SolidBox(10,15,25,3);
System.out.println("Volume of the Solid box : " + m1.volume());
System.out.println("The weight of the Solid Box : " + m1.weight() + " KiloGrams.");
}
}
c) Write a java program for abstract class to find areas of different shapes

abstract class Shape {
int dim1;
int dim2;
Shape(int a, int b) {
dim1 = a;
dim2 = b;
}
abstract double area();
}
class ImpRectangle extends Shape{
ImpRectangle(int a, int b) {
super(a,b);
}
public double area() {
return (dim1*dim2);
}
}
class ImpTriangle extends Shape {
ImpTriangle(int a, int b) {
super(a,b);
}
public double area() {
return (dim1*dim2)/2;
}
}
class AbstractTest {
public static void main(String[] args) {
Shape r = new ImpRectangle(20,25);
Shape t = new ImpTriangle(20,25);
System.out.println("Area of Rectangle : " + r.area());
System.out.println("Area of Triangle : " + t.area());
}
}

Exercise - 6 (Inheritance - Continued)
a)	Write a JAVA program give example for “super” keyword.

SuperDemo.java
class Parent
{
int x = 100;
int y;
Parent(int a)
{
y = a;
}
void show()
{
System.out.println("y : " + y);
}
}
class Child extends Parent
{
int x = 110;
int z;
Child(int p, int q)
{
super(p);
z = q;
}
void show()
{
System.out.println("z : " + z);
}
void superX()
{
System.out.println("super.x : " + super.x);
}
void superShow()
{
super.show();
}
}
class SuperDemo
{
public static void main(String args[])
{
Child c1 = new Child(200,220);
c1.show();
c1.superShow();
c1.superX();
System.out.println("child.x : " + c1.x);
}
}
b) Write a JAVA program to implement Interface. What kind of Inheritance can be achieved?
interface Shape { 
double PI = 3.1415; 
void area(); 
void volume(); 
} 
interface Units 
{ 
String AREA_UNITS = " sq. cm."; 
String VOLUME_UNITS = " c. c."; 
} 
class Sphere implements Shape, Units 
{ 
double radius; 
Sphere(double r) 
{ 
radius = r; 
} 
public void area() 
{ 
System.out.println("Surface Area of Sphere : " + 
(4* PI * radius * radius) + AREA_UNITS); 
} 
public void volume() 
{ 
System.out.println("Volume of Sphere : " + 
((4.0/3)* PI * Math.pow(radius,3)) + VOLUME_UNITS); 
} 
} 
class Cube implements Shape, Units 
{ 
double side; 
Cube(double s) 
{ 
side = s; 
} 
public void area() 
{ 
System.out.println("Surface Area of Cube : " + (6 * side * side) + AREA_UNITS); 
} 
public void volume() 
{ 
System.out.println("Volume of Cube : " + 
Math.pow(side,3) + VOLUME_UNITS); 
} 
} 
class InterfaceTest 
{ 
public static void main(String args[]) 
{ 
Shape s[] = { new Sphere(12.5), new Cube(9.7) }; 
for(Shape obj : s) 
{ 
obj.area(); 
obj.volume(); 
} 
} 
}

